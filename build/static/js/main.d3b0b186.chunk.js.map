{"version":3,"sources":["index.js","App.js"],"names":["rootElement","document","getElementById","ReactDOM","render","tg","window","Telegram","WebApp","App","useState","startScan","setStartScan","data","setData","handleScan","scanData","console","log","url","initDataUnsafe","user","id","fetch","setTimeout","close","useEffect","setImmediate","className","onClick","facingMode","delay","onError","err","error","onScan","style","width"],"mappings":"2HAAA,gDAKMA,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAU,UACT,cAAC,IAAG,MAENJ,E,mICLIK,EAAKC,OAAOC,SAASC,OAkEZC,IAhEH,WACV,MAAkCC,oBAAS,GAAM,mBAA1CC,EAAS,KAAEC,EAAY,KAC9B,EAAwBF,mBAAS,IAAG,mBAA7BG,EAAI,KAAEC,EAAO,KACpB,EAAgCJ,oBAAS,GAAM,mBAGzCK,GAHS,KAAa,KAGZ,iDAAG,WAAOC,GAAQ,iFAChCC,QAAQC,IAAI,mBAAoBF,GAC5BA,GAAyB,KAAbA,IACdC,QAAQC,IAAI,aAAcF,GAC1BJ,GAAa,GACbE,EAAQE,GACFG,EACJ,mDACAH,EACA,OACAX,EAAGe,eAAeC,KAAKC,GACzBC,MAAMJ,GACNK,YAAW,WACTnB,EAAGoB,OACL,GAAG,MAEJ,2CACF,gBAjBe,uCAiChB,OAXAC,qBAAU,WACRC,GAAa,kBAAMf,GAAa,EAAK,GACvC,GAAG,IAUD,sBAAKgB,UAAU,MAAK,UAClB,wBACEC,QAAS,WACPjB,GAAcD,EAChB,EAAE,SAEDA,EAAY,YAAc,eAE5BA,GACC,cAAC,IAAQ,CACPmB,WA9CS,cA+CTC,MAAO,IACPC,QA5BY,SAACC,GACnBhB,QAAQiB,MAAMD,EAChB,EA2BQE,OAAQpB,EAERqB,MAAO,CAAEC,MAAO,UAIV,KAATxB,GAAe,4BAAIA,MAG1B,C","file":"static/js/main.d3b0b186.chunk.js","sourcesContent":["import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n","// versi \"react-qr-reader\" 1.0.0. component API harus disesuaikan dengan yg baru\n\nimport \"./styles.css\";\nimport { useState, useEffect } from \"react\";\nimport QrReader from \"react-qr-reader\";\nconst tg = window.Telegram.WebApp;\n\nconst App = () => {\n  const [startScan, setStartScan] = useState(false);\n  const [data, setData] = useState(\"\");\n  const [isLoaded, setIsLoaded] = useState(false);\n  const selected = \"environment\";\n\n  const handleScan = async (scanData) => {\n    console.log(`loaded data data`, scanData);\n    if (scanData && scanData !== \"\") {\n      console.log(`loaded >>>`, scanData);\n      setStartScan(false);\n      setData(scanData);\n      const url =\n        \"https://2y4y5p6k6b.apigw.corezoid.com/webApp?qr=\" +\n        scanData +\n        \"&id=\" +\n        tg.initDataUnsafe.user.id;\n      fetch(url);\n      setTimeout(function () {\n        tg.close();\n      }, 1000);\n      // setPrecScan(scanData);\n    }\n  };\n  const handleError = (err) => {\n    console.error(err);\n  };\n\n  useEffect(() => {\n    setImmediate(() => setStartScan(true)); // автоматически запускаем сканер\n  }, []);\n\n  /*\n  const handleLoad = () => {\n    setIsLoaded(true); // отмечаем, что компонент загрузился\n    setStartScan(true); // запускаем сканирование\n  };\n  */\n\n  return (\n    <div className=\"App\">\n      <button\n        onClick={() => {\n          setStartScan(!startScan);\n        }}\n      >\n        {startScan ? \"Stop Scan\" : \"Start Scan\"}\n      </button>\n      {startScan && (\n        <QrReader\n          facingMode={selected}\n          delay={2000}\n          onError={handleError}\n          onScan={handleScan}\n          //onLoad={handleLoad} // добавляем обработчик загрузки компонента\n          style={{ width: \"100%\" }}\n        />\n      )}\n\n      {data !== \"\" && <p>{data}</p>}\n    </div>\n  );\n};\n\nexport default App;\n"],"sourceRoot":""}